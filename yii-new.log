Seems you have upgraded Yii Framework from version 2.0.12 to 2.0.13.1.

  Please check the upgrade notes for possible incompatible changes
  and adjust your application code accordingly.

  Upgrade from Yii 2.0.12
  -----------------------

  * The `yii\web\Request` class allowed to determine the value of `getIsSecureConnection()` form the
    `X-Forwarded-Proto` header if the connection was made via a normal HTTP request. This behavior
    was insecure as the header could have been set by a malicious client on a non-HTTPS connection.
    With 2.0.13 Yii adds support for configuring trusted proxies. If your application runs behind a reverse proxy and relies on
    `getIsSecureConnection()` to return the value form the `X-Forwarded-Proto` header you need to explicitly allow
    this in the Request configuration. See the [guide](http://www.yiiframework.com/doc-2.0/guide-runtime-requests.html#trusted-proxies) for more information.

    This setting also affects you when Yii is running on IIS webserver, which sets the `X-Rewrite-Url` header.
    This header is now filtered by default and must be listed in trusted hosts to be detected by Yii:

    ```php
    [   // accept X-Rewrite-Url from all hosts, as it will be set by IIS
        '/.*/' => ['X-Rewrite-Url'],
    ]
    ```

  * For compatibiliy with [PHP 7.2 which does not allow classes to be named `Object` anymore](https://wiki.php.net/rfc/object-typehint),
    we needed to rename `yii\base\Object` to `yii\base\BaseObject`.

    `yii\base\Object` still exists for backwards compatibility and will be loaded if needed in projects that are
    running on PHP <7.2. The compatibility class `yii\base\Object` extends from `yii\base\BaseObject` so if you
    have classes that extend from `yii\base\Object` these would still work.

    What does not work however will be code that relies on `instanceof` checks or `is_subclass_of()` calls
    for `yii\base\Object` on framework classes as these do not extend `yii\base\Object` anymore but only
    extend from `yii\base\BaseObject`. In general such a check is not needed as there is a `yii\base\Configurable`
    interface you should check against instead.

    Here is a visualisation of the change (`a < b` means "b extends a"):

    ```
    Before:

    yii\base\Object < Framework Classes
    yii\base\Object < Application Classes

    After Upgrade:

    yii\base\BaseObject < Framework Classes
    yii\base\BaseObject < yii\base\Object < Application Classes

    ```

    If you want to upgrade PHP to version 7.2 in your project you need to remove all cases that extend `yii\base\Object`
    and extend from `yii\base\BaseObject` instead:

    ```
    yii\base\BaseObject < Framework Classes
    yii\base\BaseObject < Application Classes
    ```

    For extensions that have classes extending from `yii\base\Object`, to be compatible with PHP 7.2, you need to
    require `"yiisoft/yii2": "~2.0.13"` in composer.json and change affected classes to extend from `yii\base\BaseObject`
    instead. It is not possible to allow Yii versions `<2.0.13` and be compatible with PHP 7.2 or higher.

  * A new method `public static function instance($refresh = false);` has been added to the `yii\db\ActiveRecordInterface` via a new
    `yii\base\StaticInstanceInterface`. This change may affect your application in the following ways:

    - If you have an `instance()` method defined in an `ActiveRecord` or `Model` class, you need to check whether the behavior is
      compatible with the method added by Yii.
    - Otherwise this method is implemented in the `yii\base\Model`, so the change only affects your code if you implement `ActiveRecordInterface`
      in a class that does not extend `Model`. You may use `yii\base\StaticInstanceTrait` to implement it.

  * Fixed built-in validator creating when model has a method with the same name.

    It is documented, that for the validation rules declared in model by `yii\base\Model::rules()`, validator can be either
    a built-in validator name, a method name of the model class, an anonymous function, or a validator class name.
    Before this change behavior was inconsistent with the documentation: method in the model had higher priority, than
    a built-in validator. In case you have relied on this behavior, make sure to fix it.

  * Behavior was changed for methods `yii\base\Module::get()` and `yii\base\Module::has()` so in case when the requested
    component was not found in the current module, the parent ones will be checked for this component hierarchically.
    Considering that the root parent module is usually an application, this change can reduce calls to global `Yii::$app->get()`,
    and replace them with module-scope calls to `get()`, making code more reliable and easier to test.
    However, this change may affect your application if you have code that uses method `yii\base\Module::has()` in order
    to check existence of the component exactly in this specific module. In this case make sure the logic is not corrupted.

  * If you are using "asset" command to compress assets and your web applicaiton `assetManager` has `linkAssets` turned on,
    make sure that "asset" command config has `linkAssets` turned on as well.

  You can find the upgrade notes for all versions online at:
  https://github.com/yiisoft/yii2/blob/2.0.13.1/framework/UPGRADE.md